!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.linkedList=t():e.linkedList=t()}(this,(()=>(()=>{"use strict";var e={d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{list:()=>r,newNode:()=>n});var n={};e.r(n),e.d(n,{Node:()=>o});var r={};e.r(r),e.d(r,{LinkedList:()=>l});const o=(e=null,t=null)=>({value:e,next:t,updateValue:e=>{(void 0).value=e}}),l=e=>{let t=1,n=e;const r=e=>{const r=o(e);let l=n;for(;null!==l.next;)l=l.next;l.next=r,t++},l=e=>{const r=r.Node(e,n);n=r,t++},u=()=>{let e=0,r=n;for(;e<t-2;)r=r.next,e++;r.next=null,t--};return{get head(){return n},get size(){return t},get tail(){return(()=>{let e=n;for(;null!==e.next;)e=e.next;return e})()},get pop(){return u()},get toString(){return(()=>{let e=n,t="";for(;null!==e.next;)t+=`( ${e.value} ) -> `,e=e.next;return t+=`( ${e.value} ) -> null`,t})()},at:e=>{let t=0,r=n;if(r){for(;t<e;)t++,r=r.next;return r}},appendNode:r,prependNode:l,contains:e=>{let t=n;for(;null!==t.next;){if(t.value===e)return!0;t=t.next}return!1},find:e=>{let r=n,o=0;for(;o<t;){if(r.value===e)return o;o++,r=r.next}return null},insertAt:(e,o)=>{let u=n,i=0;if(i===e)return l(o);if(e>t)return r(o);for(;i<e;){if(e-i==1){const e=u.next,t=t.Node(o,e);u.next=t}u=u.next,i++}t++},removeAt:e=>{if(e>t)return null;if(e===t)return u();0===e&&(n=n.next);let r=n,o=0;for(;o<e;){if(e-o==1){const e=r.next.next;r.next=e}r=r.next,o++}t--}}};return t})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,